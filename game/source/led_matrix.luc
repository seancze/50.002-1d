module led_matrix (
    input clk,  // clock
    input rst,  // reset
    
    input wr_en,			//write enable for vram
    input	wr_addr[11],			//write address
    input wr_data[3],			//write data
    
    output out_r[2],
    output out_g[2],
    output out_b[2],
    output out_addr[4],
    output out_clk,     //driver switching
    output out_blk,     //led output blank
    output out_lat      //output latch

  ) {

  
  sig rd_addr_top[10];
  sig rd_addr_bottom[10];
  sig wr_en_top;
  sig wr_en_bottom;
  sig wr_addr_top[10];
  sig wr_addr_bottom[10];
  sig wr_data_top[3];
  sig wr_data_bottom[3];
  
  
  .clk(clk){
  
    
  .rst(rst){
  dff shift_reg_clk[6];            //clock to send to the shift register
  dff data_tx_clk[5];                  //counter to control the flow of data
  dff register_input_counter[10];    //record the number of register writing routine it goes, up to 68
  dff refresh_row_counter[4];       //record down the row that has been through
      
  dff zero[1];
      
  vram matrix_vram_top(
    .read_addr(rd_addr_top),
    .write_en(wr_en_top),
    .write_addr(wr_addr_top),
    .write_data(wr_data_top)
    );
      
  vram matrix_vram_bottom(
     .read_addr(rd_addr_bottom),
    .write_en(wr_en_bottom),
    .write_addr(wr_addr_bottom),
    .write_data(wr_data_bottom)
    );
    }
  }
  
  const ARRAY = 16b0101010101010101;
  const ARRAY2 = 64b1;
  const ARRAY3 = 64b1000000000000000000000000000000000000000000000000000000000000000;
  
  const ROW_DATA = {6b001001, 6b001001, 6b001001, 6b001001, 
                    6b001001, 6b001001, 6b001001, 6b001001, 
    6b010010, 6b010010, 6b010010, 6b010010, 
    6b010010, 6b010010, 6b010010, 6b010010, 
    6b110110, 6b110110, 6b110110, 6b110110, 
    6b110110, 6b110110, 6b110110, 6b110110, 
    6b111111, 6b111111, 6b111111, 6b111111,
    6b111111, 6b111111, 6b111111, 6b111111,
    6b001001, 6b001001, 6b001001, 6b001001, 
    6b001001, 6b001001, 6b001001, 6b001001, 
    6b010010, 6b010010, 6b010010, 6b010010, 
    6b010010, 6b010010, 6b010010, 6b010010, 
    6b110110, 6b110110, 6b110110, 6b110110, 
    6b110110, 6b110110, 6b110110, 6b110110, 
    6b111111, 6b111111, 6b111111, 6b111111,
    6b111111, 6b111111, 6b111111, 6b111111};
    
  sig led_data[6];
  
  always {
  out_clk = shift_reg_clk.q[5] && register_input_counter.q < 129; //disables clock upon latch 
  shift_reg_clk.d = shift_reg_clk.q +1;
  data_tx_clk.d = data_tx_clk.q +1;
    
    
  if(wr_addr < 1024){
    wr_en_top = wr_en;
    wr_en_bottom =0;
    wr_addr_top = wr_addr[9:0];
    wr_addr_bottom = 0;
    wr_data_top = wr_data;
    wr_data_bottom =0;  
  }else{
    wr_en_top = 0;
    wr_en_bottom =wr_en;
    wr_addr_top = 0;
    wr_addr_bottom = wr_addr-1024;
    wr_data_top = 0;
    wr_data_bottom =wr_data;  
      }
    
    if(data_tx_clk.q == 31){
        register_input_counter.d = register_input_counter.q +1;
    }
    
    if (1 <= register_input_counter.q && register_input_counter.q < 129){ //used to be 132
       
          out_addr = refresh_row_counter.q;
          out_blk = 1;
          out_lat = 0;
          //out_r = 2b01;
          //out_g = 2b10;
          //out_b = 2b11;
          //out_r[0] =  ARRAY3[(register_input_counter.q-1)/2];
          //out_g[0] =  ARRAY3[(register_input_counter.q-1)/2+1];
          //out_b[0] =   ARRAY3[(register_input_counter.q-1)/2+2];
      
          //out_r[0] = 0;
        //out_g[0] = 0;
      //out_b[0] = 0;
      
          //out_r[1] =  ARRAY2[62-(register_input_counter.q-1)/2+1];
          //out_g[1] =  ARRAY2[62-(register_input_counter.q-1)/2+2];
          //out_b[1] =  ARRAY2[62-(register_input_counter.q-1)/2+3]; 
      
          //out_r[0] = 1 &&  ((register_input_counter.q-1)/2 == 33);
          //out_g[0] = 1 &&  ((register_input_counter.q-1)/2 == 32);
          //out_b[0] = 1 &&  ((register_input_counter.q-1)/2 == 31);
          
          //out_r[1] = 1 &&  ((register_input_counter.q-1)/2 == 32);
          //out_g[1] = 1 &&  ((register_input_counter.q-1)/2 == 33);
          //out_b[1] = 1 &&  ((register_input_counter.q-1)/2 == 20);
      
 //==============PERFECT RGB LOOP ACROSS WHOLE SCREEN BUT LAST ===================//  
    /*      out_r[0] = 1 &&  ((register_input_counter.q-1)/2 - ((register_input_counter.q-1)/2 /3 *3) == 0);
          out_g[0] = 1 &&  ((register_input_counter.q-1)/2 - ((register_input_counter.q-1)/2 /3 *3)== 1);
          out_b[0] = 1 &&  ((register_input_counter.q-1)/2 - ((register_input_counter.q-1)/2 /3 *3)== 2);
      
          out_r[1] = 1 &&  ((register_input_counter.q-1)/2 - ((register_input_counter.q-1)/2 /3 *3) == 0);
          out_g[1] = 1 &&  ((register_input_counter.q-1)/2 - ((register_input_counter.q-1)/2 /3 *3)== 1);
          out_b[1] = 1 &&  ((register_input_counter.q-1)/2 - ((register_input_counter.q-1)/2 /3 *3)== 2);
      */
      
      if (zero.q == 0){
        rd_addr_top = (refresh_row_counter.q*64) + (register_input_counter.q-1)/2 ;
        rd_addr_bottom = (refresh_row_counter.q*64) + (register_input_counter.q-1)/2 ;
        zero.d = 1;
      }
      
      else{
        rd_addr_top = (refresh_row_counter.q*64) + (register_input_counter.q-2)/2 ;
        rd_addr_bottom = (refresh_row_counter.q*64) + (register_input_counter.q-2)/2 ;
        zero.d = 0;
        
      }
      
      
      /*
        led_data = ROW_DATA[(register_input_counter.q-1)/2];
      
        out_r[0] = led_data[0];
        out_g[0] = led_data[1];
        out_b[0] = led_data[2];
      
        out_r[1] = led_data[3];
        out_g[1] = led_data[4];
        out_b[1] = led_data[5];
      */
      
        out_r[0] = matrix_vram_top.out_bit[2];
        out_g[0] = matrix_vram_top.out_bit[1];
        out_b[0] = matrix_vram_top.out_bit[0];
      
        out_r[1] = matrix_vram_bottom.out_bit[2];
        out_g[1] = matrix_vram_bottom.out_bit[1];
        out_b[1] = matrix_vram_bottom.out_bit[0];
      
      
      if(register_input_counter.q == 128){
        out_lat = 1;
        if(data_tx_clk.q ==15){
          refresh_row_counter.d = refresh_row_counter.q +1;
            
        }
      }
    //}else if(132 <=register_input_counter.q &&  register_input_counter.q < 134 ){
      
    //  out_addr = refresh_row_counter.q;
    //  out_blk = 1;
    //  out_lat = 0;
    //  out_r = 2b10;
    //  out_g = 2b01;
    //  out_b = 2b00; 
   // }else if (134<= register_input_counter.q && register_input_counter.q < 136){ //134
   //       out_blk = 1;
   //       out_lat = 0;
   //       out_addr = refresh_row_counter.q;
   //       out_r = 2b00;
   //       out_g = 2b00;
   //       out_b = 2b00;
    //}else if (134<=register_input_counter.q && register_input_counter.q < 136){  //136
    //      out_blk = 1;
    //      out_lat = 0;
    //      out_addr = refresh_row_counter.q;
    //      out_r = 2b00;
    //      out_g = 2b00;
    //      out_b = 2b00;
    //}else if(136<=register_input_counter.q && register_input_counter.q < 138){   //138
    //      out_blk = 0;
    //      out_lat = 0;
     //     out_addr = refresh_row_counter.q;
     //     out_r = 2b00;
     //     out_g = 2b00;
     //     out_b = 2b00;
    }else{
          out_blk = 0;
          out_lat = 0;
          out_addr = refresh_row_counter.q;
          out_r = 2b00;
          out_g = 2b00;
          out_b = 2b00;
    }
  }
}
