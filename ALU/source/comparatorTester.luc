module comparatorTester (
    input clk,  // clock
    input rst,  // reset
    input start,
    input inv,
    output status[2], //0 = not done, 1=pass, 2 = fail
    output out[16]
  ) {
  //comparator always needs adder first 
  adder ad;
  comparator cmp;
  dff testNum[5](#INIT(0),.clk(clk),.rst(rst)); // 24 cases 5 bits 11000
  fsm state (.clk(clk),.rst(rst)) = {IDLE,TEST,PASS};
  fsm track_failure (.clk(clk), .rst(rst)) = {NULL, FAIL_BEFORE};
  
  test_case_enum enum(#NUM_CASES(24), #SIZE(5), .clk(clk), .rst(rst)); 

  

  always {
    //define all the inputs for the adder and comparator 
    ad.alufn0=1; //always subtract
    ad.a = b0;
    ad.b = b0;
    ad.inv = 0;
    cmp.alufn[2] = 0;
    cmp.alufn[1] = 1;
    cmp.z = ad.z;
    cmp.n = ad.n;
    cmp.v = ad.v;
    cmp.inv = inv;
    
    status = 0;
    
    //when not testing this unit automatically, make idle
    if(start==0){ 
      state.d =state.IDLE;
    }
    case(state.q){ 
      state.IDLE:
        status = 0;
        if(start==1){ //start test at next cycle
          state.d = state.TEST;
          track_failure.d = track_failure.NULL;
          testNum.d = 0; 
         }
      state.TEST:
        case(testNum.q){
          //testcases for ==, < and <= are the same
          //testing for < we think about pos<pos, neg<pos and neg<neg
          //pos<pos and neg<neg do not have overflow 
          //so need to test neg<pos overflow and no overflow
          /*
            All follow the same pattern
            1. give adder a & b inputs  
            2. tell comparator which comparasion 
              01: ==
              10: <
              11: <=
            3. give comparator z,n,v from adder
            4. check if comparator gives correct output 
            5. if not correct, then fail
          */ 
          //first we test equals
          h0: // test 0 == 0  a=b 
            ad.a = 16h0; 
            ad.b = 16h0;
            cmp.alufn[2] = 0;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            } 
           h1: //test 1 == 1 pos=pos
            ad.a = 16h1;
            ad.b = 16h1;
            cmp.alufn[2] = 0;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }       
          h2: //test 0xFFFF == 0xFFFF neg=neg
            ad.a = 16hFFFF;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 0;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           h3: //test 0x8 == 0xA pos<pos no overflow
            ad.a = 16h8;
            ad.b = 16hA;
            cmp.alufn[2] = 0;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           
           h4: //test 0xFFFF == 1 neg<pos no overflow
            ad.a = 16hFFFF;
            ad.b = 16h1;
            cmp.alufn[2] = 0;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           
           h5: //test 0x8000 == 0x7FFF  neg<pos overflow
            ad.a = 16h8000;
            ad.b = 16h7FFF;
            cmp.alufn[2] = 0;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
            h6: //test 0xFFFE == 0xFFFF  neg<neg no overflow
            ad.a = 16hFFFE;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 0;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           h7: //test 0 == 0xFFFF a>b
            ad.a = 16h0;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 0;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
           
          //****************************************  
          //second we test A<B 
          
          h8: // test 0 < 0  a=b 
            ad.a = 16h0; 
            ad.b = 16h0;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 0;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            } 
           h9: //test 1 < 1 pos=pos
            ad.a = 16h1;
            ad.b = 16h1;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 0;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }       
          hA: //test 0xFFFF < 0xFFFF neg=neg
            ad.a = 16hFFFF;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 0;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           hB: //test 0x8 < 0xA pos<pos no overflow
            ad.a = 16h8;
            ad.b = 16hA;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 0;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           hC: //test 0xFFFF < 1 neg<pos no overflow
            ad.a = 16hFFFF;
            ad.b = 16h1;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 0;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           hD: //test 0x8000 < 0x7FFF  neg<pos overflow
            ad.a = 16h8000;
            ad.b = 16h7FFF;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 0;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            hE: //test 0xFFFE < 0xFFFF  neg<neg no overflow
            ad.a = 16hFFFE;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 0;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           hF: //test 0 < 0xFFFF a>b
            ad.a = 16h0;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 0;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
          //****************************************  
          //lastly we test A<=B 
          h10: // test 0 <= 0  a=b 
            ad.a = 16h0; 
            ad.b = 16h0;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            } 
           h11: //test 1 <= 1 pos=pos
            ad.a = 16h1;
            ad.b = 16h1;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }       
          h12: //test 0xFFFF <= 0xFFFF neg=neg
            ad.a = 16hFFFF;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           h13: //test 0x8 <=0xA pos<pos no overflow
            ad.a = 16h8;
            ad.b = 16hA;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           h14: //test 0xFFFF <=1 neg<pos no overflow
            ad.a = 16hFFFF;
            ad.b = 16h1;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           h15: //test 0x8000 <= 0x7FFF  neg<pos overflow
            ad.a = 16h8000;
            ad.b = 16h7FFF;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            h16: //test 0xFFFE <= 0xFFFF  neg<neg no overflow
            ad.a = 16hFFFE;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
           h17: //test 0 <= 0xFFFF a>b
            ad.a = 16h0;
            ad.b = 16hFFFF;
            cmp.alufn[2] = 1;
            cmp.alufn[1] = 1;
            cmp.z = ad.z;
            cmp.n = ad.n;
            cmp.v = ad.v;
            status = 1;
            if(cmp.out[0]!=0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
         
           
           //****************************************  
           //if all test cases passed up to here, pass
          h18:
            state.d = state.PASS;
          }
        testNum.d = enum.sel; // incremenet for next case 
      state.PASS:
        if(track_failure.q == track_failure.FAIL_BEFORE) {
          status = 2;
            } else {
          status = 1;
          }

     } 

     out = cmp.out;
    
    
  }
}
