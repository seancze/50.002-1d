module booleanTester (
    input clk,  // clock
    input rst,  // reset
    input start, //to change from 0-1 in au_top(commencing test)
    output status[2],
    output out[16]
  ) {
  
  dff counter[4] (.clk(clk) , .rst(rst));
  fsm state (.clk(clk), .rst(rst)) = {IDLE, TEST, PASS, FAIL};
  boolean bool;

  always {
    status = 0;  // 0:start 1:correct 2:wrong
    bool.a = 0;
    bool.b = 0;
    bool.alufn = 0;
    
    if (start == 0){
      state.d = state.IDLE;
    }
    
    case(state.q){
      state.IDLE:
        status = 0;
        if(start == 1){
          state.d = state.TEST;
        }
        
        // using a = 42 and b = 24 as test case
        
      state.TEST: // test for all 4 operations
        case(counter.q){
          1:bool.alufn = 4b1000; //AND
            bool.a = 16b101010; //42 
            bool.b = 16b011000; //24
            if( bool.out != 16b01000){
              state.d = state.FAIL;
            }
            
          2:bool.alufn = 4b1110; //OR
            bool.a = 16b101010; //42 
            bool.b = 16b011000; //24
            if ( bool.out != 16b111010){
              state.d = state.FAIL;
            }
            
          3:bool.alufn = 4b0110; //XOR
            bool.a = 16b101010; //42 
            bool.b = 16b011000; //24
            if (bool.out != 16b110010){
              state.d = state.FAIL;
            }
            
          4:bool.alufn = 4b1010; //"A"
            bool.a = 16b101010; //42
            bool.b = 16b011000; //24 
            if (bool.out != 16b101010){
              state.d = state.FAIL;
            }
            
          5:bool.alufn = 4b1100; // "B"
            bool.a = 16b101010; //42
            bool.b = 16b011000; //24
            if (bool.out != 16b011000){
              state.d = state.FAIL;
            }
            
          6:bool.alufn = 4b0111; // NAND
            bool.a = 16b101010; //42 
            bool.b = 16b011000; //24
            if (bool.out != 16hFFF7){
              state.d = state.FAIL;
            }
          
          7:bool.alufn = 4b0001; // NOR
            bool.a = 16b101010; //42 
            bool.b = 16b011000; //24
            if (bool.out != 16hFFC5){
              state.d = state.FAIL;
            }
          
          8:bool.alufn = 4b1001; // XNOR
            bool.a = 16b101010; //42 
            bool.b = 16b011000; //24
            if (bool.out != 16hFFCD){
              state.d = state.FAIL;
            }
            
          9:state.d = state.PASS;
        }
        
      state.PASS:
        status = 1;
        
      state.FAIL:
        status = 2;
    }    
    counter.d = counter.q+1;
    out = bool.out; 
  }
}

