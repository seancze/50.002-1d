global Func {
  const ADD = b0;
  const SUB = b1;
}

module adderTester (
    input clk,  // clock
    input rst,  // reset
    input start,
    input inv,
    output status[2], // 0 - not started, 1 - pass, 2 - fail,
    output out[16]

  ) {

  // Create the 4 dffs for 4 bits
  dff register[31](.clk(clk), .rst(rst));
  
  // Declare the fsm states
  fsm state (.clk(clk), .rst(rst)) = {IDLE, TESTING, PASS};
  fsm track_failure (.clk(clk), .rst(rst)) = {NULL, FAIL_BEFORE};

  test_case_enum enum(.clk(clk), .rst(rst)); 
  
  // Import the adder
  adder adder;
  
  always {
    // Declare initial values
    status = 0;
    adder.a = 0;
    adder.b = 0;
    adder.inv = inv;
    adder.alufn0 = Func.ADD; // for addition

    
    // If testing has not started, state is still IDLE
    if(start == 0) {
      state.d = state.IDLE;
    }
    
    // Define the methods for every state
    case(state.q) {
      state.IDLE:
        status = 0;
        if(start == 1){
          state.d = state.TESTING;
          track_failure.d = track_failure.NULL;
        }
      
      // Declare the test cases when state is TESTING
      state.TESTING:
        case(register.q) {
          // ADD: 0 + 0
          4b0000:
            adder.a = 16h0000;
            adder.b = 16h0000;
            adder.alufn0 = Func.ADD;
            status = 1;
            
            if (adder.out != 16h0000) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          
          // ADD: pos + pos with overflow
          4b0001:
            adder.a = 16h8001;
            adder.b = 16h8000;
            adder.alufn0 = Func.ADD;
            status = 1;
            
            if (adder.out != 16h0001) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
          // ADD: pos + pos with NO overflow
          4b0010:
            adder.a = 16h0001;
            adder.b = 16h0001;
            adder.alufn0 = Func.ADD;
            status = 1;
            
            if (adder.out != 16h0002) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
          // ADD: pos + neg with overflow
          4b0011:
            adder.a = 16h0004; // 4
            adder.b = 16hFFFF; // -1
            adder.alufn0 = Func.ADD;
            status = 1;
            
            if (adder.out != 16h0003) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          
          // ADD: pos + neg with NO overflow
          4b0100:
            adder.a = 16h0001;
            adder.b = 16hF000;
            adder.alufn0 = Func.ADD;
            status = 1;
            
            if (adder.out != 16hF001) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
            
          // SUB: 0 - 0
          4b0101:
            adder.a = 16h0000;
            adder.b = 16h0000;
            adder.alufn0 = Func.SUB;
            status = 1;
            
            if (adder.out != 16h0000) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
          // SUB: pos - pos with NO overflow
          4b0110:
            adder.a = 16h0002;
            adder.b = 16h0001;
            adder.alufn0 = Func.SUB;
            status = 1;
            
            if (adder.out != 16h0001) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
          // SUB: pos - neg with overflow
          4b0111:
            adder.a = 16h7FFF;
            adder.b = 16h8001;
            adder.alufn0 = Func.SUB;
            status = 1;
            
            if (adder.out != 16hFFFE) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          
          // SUB: pos - neg with NO overflow
          4b1000:
            adder.a = 16h0001;
            adder.b = 16hFFFF;
            adder.alufn0 = Func.SUB;
            status = 1;
            
            if (adder.out != 16h0002) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
          // SUB: neg - pos with overflow
          4b1001:
            adder.a = 16h8000;
            adder.b = 16h0001;
            adder.alufn0 = Func.SUB;
            status = 1;
            
            if (adder.out != 16h7FFF) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          
          // SUB: neg - pos with NO overflow
          4b1010:
            adder.a = 16hFFFF;
            adder.b = 16h0001;
            adder.alufn0 = Func.SUB;
            status = 1;
            
            if (adder.out != 16hFFFE) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
          // SUB: neg - neg with NO overflow
          4b1011:
            adder.a = 16hFFFF;
            adder.b = 16hFFFF;
            adder.alufn0 = Func.SUB;
            status = 1;
            
            if (adder.out != 16h0000) {
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
            
          // TEST PASSED!
          4b1100:
            state.d = state.PASS;
        }
      state.PASS:
         if(track_failure.q == track_failure.FAIL_BEFORE) {
          status =2;
            } else {
          status = 1;
          }
    } 
    
    // Increment the input terminal by 1
    register.d = enum.sel;
    // Used to display output using LEDs
    out = adder.out;

  }
}
