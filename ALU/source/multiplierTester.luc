module multiplierTester (
    input clk,  // clock
    input rst,  // reset
    input start,
    input inv,
    output status[2], //0 = not done, 1=pass, 2 = fail
    output out[16]
  ) {
  multiplier mul;
  dff testNum[4](#INIT(0),.clk(clk),.rst(rst)); // 15 cases 4 bits 1111
  fsm state (.clk(clk),.rst(rst)) = {IDLE,TEST,PASS};
  fsm track_failure (.clk(clk), .rst(rst)) = {NULL, FAIL_BEFORE};
  
  test_case_enum enum(.clk(clk), .rst(rst)); 

  always {
    //when not testing this unit automatically, make idle
    mul.a = 16h0;
    mul.b=16h0;
    mul.inv = inv;
    status = 0;
    if(start==0){ 
      state.d =state.IDLE;
    }
    case(state.q){ 
      state.IDLE:
        status = 0;
        if(start==1){ //start test at next cycle
          state.d = state.TEST;
          track_failure.d = track_failure.NULL;
          testNum.d = 0; 
         }
      state.TEST:
        case(testNum.q){
          h0: //0*0
            mul.a = 16h0;
            mul.b = 16h0;
            status = 1;
            if(mul.out!=16h0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }        
          h1: //1*1 basic pos*pos
            mul.a = 16h1;
            mul.b = 16h1;
            status = 1;
            if(mul.out!=16h1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          h2: //-1*-1 basic neg*neg
            mul.a = 16hFFFF;
            mul.b = 16hFFFF;
            status = 1;
            if(mul.out!=16h1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          h3: //0*0x4321 = 0 basic 0*pos 
            mul.a = 16h0;
            mul.b = 16h4321;
            status = 1;
            if(mul.out!=16h0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          h4: //1*0x4321 = 17185 dec basic 1*pos 
            mul.a = 16h1;
            mul.b = 16h4321;
            status = 1;
            if(mul.out!=16h4321){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          h5: //-1*0x4321 = -17185 dec basic -1*pos 
            mul.a = 16hFFFF;
            mul.b = 16h4321;
            status = 1;
            if(mul.out!=16hBCDF){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          h6: //0*0xF321 = 0 basic 0*neg 
            mul.a = 16h0;
            mul.b = 16hF321;
            status = 1;
            if(mul.out!=16h0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          h7: //1*0xF321 = -3295 dec basic 1*neg 
            mul.a = 16h1;
            mul.b = 16hF321;
            status = 1;
            if(mul.out!=16hF321){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          h8: //-1*0xF321 = 3295 dec basic -1*neg 
            mul.a = 16hFFFF;
            mul.b = 16hF321;
            status = 1;
            if(mul.out!=16hCDF){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          h9: //2*4 = 8 pos*pos no overflow
            mul.a = 16h2;
            mul.b = 16h4;
            status = 1;
            if(mul.out!=16h8){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          //*4x0x4321 = 68740 dec 
          //lowest 16 bits is 0xC84 = 3204 dec pos*pos overflow
          hA: 
            mul.a = 16h4;
            mul.b = 16h4321;
            status = 1;
            if(mul.out!=16hC84){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          hB: //0xFFFE*0xFFFC = -2*-4* = 8 neg*neg no overflow
            mul.a = 16hFFFE;
            mul.b = 16hFFFC;
            status = 1;
            if(mul.out!=16h8){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          //*0xF00Fx0xF00E = -4081*-4082= 16658642 dec  
          //lowest 16 bits is 0x30D2 = 12498 dec neg*neg overflow
          hC: 
            mul.a = 16hF00F;
            mul.b = 16hF00E;
            status = 1;
            if(mul.out!=16h30D2){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          hD: //2*0xFFFC = 2*-4* = -8 pos*neg no overflow
            mul.a = 16h2;
            mul.b = 16hFFFC;
            status = 1;
            if(mul.out!=16hFFF8){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            } 
          //*0xFF1x0xF00E = 4081*-4082 = -16658642 dec 
          //lowest 16 bits is 0xCF2E = -12498 dec pos*neg overflow
          hE: 
            mul.a = 16hFF1;
            mul.b = 16hF00E;
            status = 1;
            if(mul.out!=16hCF2E){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          //****************************************  
          //if all test cases passed up to here, pass
          hF:
            state.d = state.PASS;
          }
        testNum.d = enum.sel; // incremenet for next case 
      state.PASS:
        if(track_failure.q == track_failure.FAIL_BEFORE) {
          status = 2;
            } else {
          status = 1;
          }
    }
    out = mul.out;
  }
}
