module multiplierTester (
    input clk,  // clock
    input rst,  // reset
    input start,
    input inv,
    input reset_button,
    output status[2], //0 = not done, 1=pass, 2 = fail
    output out[16]
  ) {
  multiplier mul;
  dff testNum[5](#INIT(0),.clk(clk),.rst(rst)); // 15 cases 4 bits 1111
  fsm state (.clk(clk),.rst(rst)) = {IDLE,TEST,PASS};
  fsm track_failure (.clk(clk), .rst(rst)) = {NULL, FAIL_BEFORE};
  
  test_case_enum enum(#NUM_CASES(16), #SIZE(5), .clk(clk), .rst(reset_button)); 

  always {
    //when not testing this unit automatically, make idle
    mul.a = 16h0;
    mul.b=16h0;
    mul.inv = inv;
    status = 0;
    if(start==0){ 
      state.d =state.IDLE;
    }
    case(state.q){ 
      state.IDLE:
        status = 0;
        if(start==1){ //start test at next cycle
          state.d = state.TEST;
          track_failure.d = track_failure.NULL;
          testNum.d = 0; 
         }
      state.TEST:
        case(testNum.q){
          1: //0*0
            mul.a = 16h0;
            mul.b = 16h0;
            status = 1;
            if(mul.out!=16h0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }        
          2: //1*1 basic pos*pos
            mul.a = 16h1;
            mul.b = 16h1;
            status = 1;
            if(mul.out!=16h1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          3: //-1*-1 basic neg*neg
            mul.a = 16hFFFF;
            mul.b = 16hFFFF;
            status = 1;
            if(mul.out!=16h1){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          4: //0*0x00FF = 0 basic 0*pos 
            mul.a = 16h0;
            mul.b = 16h00FF;
            status = 1;
            if(mul.out!=16h0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          5: //1*0x00FF = 17185 dec basic 1*pos 
            mul.a = 16h1;
            mul.b = 16h00FF;
            status = 1;
            if(mul.out!=16h00FF){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          6: //-1*0x00FF = -255 dec basic -1*pos 
            mul.a = 16hFFFF;
            mul.b = 16h00FF;
            status = 1;
            if(mul.out!=16hFF01){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          7: //0*0xF000 = 0 basic 0*neg 
            mul.a = 16h0;
            mul.b = 16hF000;
            status = 1;
            if(mul.out!=16h0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          8: //1*0xF000 = -3295 dec basic 1*neg 
            mul.a = 16h1;
            mul.b = 16hF000;
            status = 1;
            if(mul.out!=16hF000){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          9: //-1*0xF000 = 3295 dec basic -1*neg 
            mul.a = 16hFFFF;
            mul.b = 16hF000;
            status = 1;
            if(mul.out!=16h1000){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          10: //2*8 = 16 pos*pos no overflow
            mul.a = 16h2;
            mul.b = 16h8;
            status = 1;
            if(mul.out!=16h0010){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          //h0F00 * h00F0 = 921600 dec (hE1000)
          //lowest 16 bits is 0x1000 pos*pos overflow
          11: 
            mul.a = 16h0F00;
            mul.b = 16h00F0;
            status = 1;
            if(mul.out!=16h1000){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          12: //0xFFFE*0xFFFC = -2*-8 = 16 neg*neg no overflow
            mul.a = 16hFFFE;
            mul.b = 16hFFF8;
            status = 1;
            if(mul.out!=16h0010){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          //0xFF00 * 0xF0F0 = -256*-3856= 987136 dec  
          //lowest 16 bits is 0x1000 neg*neg overflow
          13: 
            mul.a = 16hFF00;
            mul.b = 16hF0F0;
            status = 1;
            if(mul.out!=16h1000){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          14: //2*0xFFF8 = 2*-8 = -16 pos*neg no overflow
            mul.a = 16h2;
            mul.b = 16hFFF8;
            status = 1;
            if(mul.out!=16hFFF0){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            } 
          //0x0F00 * 0xF0F0 = 3840*(-3856) = -14807040 dec 
          //lowest 16 bits is 0x1000 pos*neg overflow
          15: 
            mul.a = 16h0F00;
            mul.b = 16hF0F0;
            status = 1;
            if(mul.out!=16h1000){
              track_failure.d = track_failure.FAIL_BEFORE;
              status = 2;
            }
          //****************************************  
          //if all test cases passed up to here, pass
          16:
            state.d = state.PASS;
          }
        testNum.d = enum.sel; // incremenet for next case 
      state.PASS:
        if(track_failure.q == track_failure.FAIL_BEFORE) {
          status = 2;
            } else {
          status = 1;
          }
        if(reset_button) {
          state.d = state.TEST;
          }
    }
    out = mul.out;
  }
}
