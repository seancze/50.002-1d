module auto_tester (
    input clk,  // clock
    input rst,  // reset
    input button[3],  // three buttons (0: left, 1: right, 2: middle)
    input inv[1],
    output out_state[3],  // current testing state
    // 0: idle
    // 1: adder
    // 2: comparator
    // 3: boolean
    // 4: shifter
    // 5: multiplier
    // 6: error
    output out_status[2],  // current tester status
    // 0: not done
    // 1: pass
    // 2: fail
    output out_led[16]

  ) {
  
  adderTester test_adder(.clk(clk), .rst(rst));
  comparatorTester test_compare(.clk(clk), .rst(rst));
  booleanTester test_boole(.clk(clk), .rst(rst));
  shifterTester test_shifter(.clk(clk), .rst(rst));
  multiplierTester test_multiply(.clk(clk), .rst(rst));
  errorTester test_error(.clk(clk), .rst(rst));
  
  fsm state(.clk(clk), .rst(rst)) = {IDLE, ADDER, COMPARATOR, BOOLEAN, SHIFTER, MULTIPLIER, ERROR};
  
  always {
    test_adder.start = 0;
    test_adder.inv = inv;
    test_compare.start = 0;
    test_boole.start = 0;
    test_shifter.start = 0;
    test_multiply.start = 0;
    test_error.start = 0;
    
    out_status = 2b00;
    out_state = state.q;
    out_led = 16b0;

    // FSM for auto testing
    case(state.q) {
      state.IDLE:
        out_status = 2b00;
        if (button[0]) {  // pressed left
          state.d = state.ERROR;
        }
        else if (button[1]) {  // pressed right
          state.d = state.q + 1;
        }
        
      state.ADDER:
        test_adder.start = 1;
        test_adder.inv = inv;
        out_status = test_adder.status;
        out_led = test_adder.out;
        if (button[0]) {  // pressed left
          state.d = state.q - 1;
        }
        else if (button[1]) {  // pressed right
          state.d = state.q + 1;
        }
        
      state.COMPARATOR:
        test_compare.start = 1;
        out_status = test_compare.status;
        out_led = test_compare.out;
        if (button[0]) {  // pressed left
          state.d = state.q - 1;
        }
        else if (button[1]) {  // pressed right
          state.d = state.q + 1;
        }
        
      state.BOOLEAN:
        test_boole.start = 1;
        out_status = test_boole.status;
        out_led = test_boole.out;
        if (button[0]) {  // pressed left
          state.d = state.q - 1;
        }
        else if (button[1]) {  // pressed right
          state.d = state.q + 1;
        }
        
      state.SHIFTER:
        test_shifter.start = 1;
        out_status = test_shifter.status;
        out_led = test_shifter.out;
        if (button[0]) {  // pressed left
          state.d = state.q - 1;
        }
        else if (button[1]) {  // pressed right
          state.d = state.q + 1;
        }
        
      state.MULTIPLIER:
        test_multiply.start = 1;
        out_status = test_multiply.status;
        out_led = test_multiply.out;
        if (button[0]) {  // pressed left
          state.d = state.q - 1;
        }
        else if (button[1]) {  // pressed right
          state.d = state.q + 1;
        }
        
      state.ERROR:  // ERROR test case, suppose to fail
        test_error.start = 1;
        out_status = test_error.status;
        if (button[0]) {  // pressed left
          state.d = state.q - 1;
        }
        else if (button[1]) {  // pressed right
          state.d = state.IDLE;
        }
    }
 
    if (button[2]) {  // pressed middle, go back to idle
      state.d = state.IDLE;
    }
}
