/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_tester_1 (
    input clk,
    input rst,
    input [1:0] button,
    input [15:0] dip,
    input [0:0] inv,
    output reg [15:0] out,
    output reg [15:0] out_segs
  );
  
  
  
  reg [15:0] M_inputA_d, M_inputA_q = 1'h0;
  
  reg [15:0] M_inputB_d, M_inputB_q = 1'h0;
  
  reg [5:0] M_alufn_d, M_alufn_q = 1'h0;
  
  reg [0:0] M_inputInv_d, M_inputInv_q = 1'h0;
  
  reg [15:0] M_result_d, M_result_q = 1'h0;
  
  reg [15:0] M_segs_d, M_segs_q = 1'h0;
  
  
  localparam WAITA_control = 2'd0;
  localparam WAITB_control = 2'd1;
  localparam WAITALUFN_control = 2'd2;
  localparam GETRESULT_control = 2'd3;
  
  reg [1:0] M_control_d, M_control_q = WAITA_control;
  
  wire [16-1:0] M_aluunit_out;
  wire [4-1:0] M_aluunit_z;
  wire [4-1:0] M_aluunit_v;
  wire [4-1:0] M_aluunit_n;
  reg [6-1:0] M_aluunit_alufn;
  reg [16-1:0] M_aluunit_a;
  reg [16-1:0] M_aluunit_b;
  reg [1-1:0] M_aluunit_inv;
  alu_7 aluunit (
    .alufn(M_aluunit_alufn),
    .a(M_aluunit_a),
    .b(M_aluunit_b),
    .inv(M_aluunit_inv),
    .out(M_aluunit_out),
    .z(M_aluunit_z),
    .v(M_aluunit_v),
    .n(M_aluunit_n)
  );
  
  always @* begin
    M_control_d = M_control_q;
    M_result_d = M_result_q;
    M_inputB_d = M_inputB_q;
    M_inputA_d = M_inputA_q;
    M_inputInv_d = M_inputInv_q;
    M_segs_d = M_segs_q;
    M_alufn_d = M_alufn_q;
    
    M_aluunit_a = M_inputA_q;
    M_aluunit_b = M_inputB_q;
    M_aluunit_alufn = M_alufn_q;
    M_aluunit_inv = M_inputInv_q;
    
    case (M_control_q)
      WAITA_control: begin
        M_result_d = dip;
        M_segs_d = 16'h0fff;
        if (button[1+0-:1]) begin
          M_inputA_d = dip;
          M_control_d = WAITB_control;
        end else begin
          M_control_d = WAITA_control;
        end
      end
      WAITB_control: begin
        M_result_d = dip;
        M_segs_d = 16'h1fff;
        if (button[1+0-:1]) begin
          M_inputB_d = dip;
          M_control_d = WAITALUFN_control;
        end else begin
          M_control_d = WAITB_control;
        end
      end
      WAITALUFN_control: begin
        M_result_d[6+9-:10] = 1'h0;
        M_result_d[0+5-:6] = dip[0+5-:6];
        M_segs_d = 16'h5fff;
        if (button[1+0-:1]) begin
          M_alufn_d = dip[0+5-:6];
          M_control_d = GETRESULT_control;
          M_inputInv_d = inv;
        end else begin
          M_control_d = WAITALUFN_control;
        end
      end
      GETRESULT_control: begin
        M_result_d = M_aluunit_out;
        M_segs_d = {4'h8, M_aluunit_z, M_aluunit_v, M_aluunit_n};
        if (button[1+0-:1]) begin
          M_inputA_d = 1'h0;
          M_inputB_d = 1'h0;
          M_alufn_d = 1'h0;
          M_result_d = 1'h0;
          M_control_d = WAITA_control;
        end else begin
          M_control_d = GETRESULT_control;
        end
      end
    endcase
    if (button[0+0-:1]) begin
      M_inputA_d = 1'h0;
      M_inputB_d = 1'h0;
      M_alufn_d = 1'h0;
      M_result_d = 1'h0;
      M_control_d = WAITA_control;
    end
    out = M_result_q;
    out_segs = M_segs_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_segs_q <= 1'h0;
    end else begin
      M_segs_q <= M_segs_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_inputA_q <= 1'h0;
    end else begin
      M_inputA_q <= M_inputA_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_result_q <= 1'h0;
    end else begin
      M_result_q <= M_result_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_inputB_q <= 1'h0;
    end else begin
      M_inputB_q <= M_inputB_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_inputInv_q <= 1'h0;
    end else begin
      M_inputInv_q <= M_inputInv_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_alufn_q <= 1'h0;
    end else begin
      M_alufn_q <= M_alufn_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_control_q <= 1'h0;
    end else begin
      M_control_q <= M_control_d;
    end
  end
  
endmodule
