/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module shifterTester_11 (
    input clk,
    input rst,
    input start,
    output reg [1:0] status,
    output reg [15:0] out
  );
  
  
  
  wire [16-1:0] M_shift_out;
  reg [16-1:0] M_shift_a;
  reg [5-1:0] M_shift_b;
  reg [6-1:0] M_shift_alufn;
  shifter_20 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .out(M_shift_out)
  );
  
  
  localparam IDLE_currentstate = 2'd0;
  localparam TEST_currentstate = 2'd1;
  localparam PASS_currentstate = 2'd2;
  localparam FAIL_currentstate = 2'd3;
  
  reg [1:0] M_currentstate_d, M_currentstate_q = IDLE_currentstate;
  
  reg [3:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_currentstate_d = M_currentstate_q;
    M_counter_d = M_counter_q;
    
    M_shift_a = 1'h0;
    M_shift_b = 1'h0;
    M_shift_alufn[0+0-:1] = 1'h0;
    M_shift_alufn[1+0-:1] = 1'h0;
    status = 1'h0;
    if (start == 1'h0) begin
      M_currentstate_d = IDLE_currentstate;
      status = 1'h0;
    end else begin
      
      case (M_currentstate_q)
        IDLE_currentstate: begin
          M_currentstate_d = TEST_currentstate;
        end
        TEST_currentstate: begin
          
          case (M_counter_q)
            4'h1: begin
              M_shift_alufn[0+0-:1] = 1'h0;
              M_shift_alufn[1+0-:1] = 1'h0;
              M_shift_a = 16'hffff;
              M_shift_b = 4'h8;
              if (M_shift_out != 16'hff00) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'h2: begin
              M_shift_alufn[0+0-:1] = 1'h0;
              M_shift_alufn[1+0-:1] = 1'h0;
              M_shift_a = 16'hffff;
              M_shift_b = 4'h0;
              if (M_shift_out != 16'hffff) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'h3: begin
              M_shift_alufn[0+0-:1] = 1'h0;
              M_shift_alufn[1+0-:1] = 1'h0;
              M_shift_a = 16'hf0f0;
              M_shift_b = 4'h4;
              if (M_shift_out != 16'h0f00) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'h4: begin
              M_shift_alufn[0+0-:1] = 1'h0;
              M_shift_alufn[1+0-:1] = 1'h0;
              M_shift_a = 16'hf00f;
              M_shift_b = 4'hf;
              if (M_shift_out != 16'h8000) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'h5: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h0;
              M_shift_a = 16'hffff;
              M_shift_b = 4'h8;
              if (M_shift_out != 16'h00ff) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'h6: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h0;
              M_shift_a = 16'hffff;
              M_shift_b = 4'h0;
              if (M_shift_out != 16'hffff) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'h7: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h0;
              M_shift_a = 16'hf0f0;
              M_shift_b = 4'h4;
              if (M_shift_out != 16'h0f0f) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'h8: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h0;
              M_shift_a = 16'hf00f;
              M_shift_b = 4'hf;
              if (M_shift_out != 16'h0001) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'h9: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h1;
              M_shift_a = 16'hffff;
              M_shift_b = 4'h8;
              if (M_shift_out != 16'hffff) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'ha: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h1;
              M_shift_a = 16'hffff;
              M_shift_b = 4'h0;
              if (M_shift_out != 16'hffff) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'hb: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h1;
              M_shift_a = 16'hf0f0;
              M_shift_b = 4'h4;
              if (M_shift_out != 16'hff0f) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'hc: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h1;
              M_shift_a = 16'hf00f;
              M_shift_b = 4'hf;
              if (M_shift_out != 16'hffff) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'hd: begin
              M_shift_alufn[0+0-:1] = 1'h1;
              M_shift_alufn[1+0-:1] = 1'h1;
              M_shift_a = 16'h1234;
              M_shift_b = 4'h4;
              if (M_shift_out != 16'h0123) begin
                M_currentstate_d = FAIL_currentstate;
              end
            end
            4'hf: begin
              M_currentstate_d = PASS_currentstate;
            end
          endcase
        end
        PASS_currentstate: begin
          status = 1'h1;
        end
        FAIL_currentstate: begin
          status = 2'h2;
        end
      endcase
      M_counter_d = M_counter_q + 1'h1;
    end
    out = M_shift_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_currentstate_q <= 1'h0;
    end else begin
      M_currentstate_q <= M_currentstate_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
