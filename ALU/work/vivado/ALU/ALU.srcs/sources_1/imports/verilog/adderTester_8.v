/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adderTester_8 (
    input clk,
    input rst,
    input start,
    input inv,
    output reg [23:0] io_led,
    output reg [1:0] status,
    output reg [15:0] out
  );
  
  
  
  reg [3:0] M_register_d, M_register_q = 1'h0;
  
  
  localparam IDLE_state = 2'd0;
  localparam TESTING_state = 2'd1;
  localparam PASS_state = 2'd2;
  localparam FAIL_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  
  wire [4-1:0] M_enum_sel;
  test_case_enum_23 enum (
    .clk(clk),
    .rst(rst),
    .sel(M_enum_sel)
  );
  
  wire [16-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [1-1:0] M_adder_alufn0;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [1-1:0] M_adder_inv;
  adder_19 adder (
    .alufn0(M_adder_alufn0),
    .a(M_adder_a),
    .b(M_adder_b),
    .inv(M_adder_inv),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_register_d = M_register_q;
    
    status = 1'h0;
    M_adder_a = 1'h0;
    M_adder_b = 1'h0;
    M_adder_inv = inv;
    M_adder_alufn0 = 1'h0;
    io_led = 24'h000000;
    if (start == 1'h0) begin
      M_state_d = IDLE_state;
    end
    
    case (M_state_q)
      IDLE_state: begin
        status = 1'h0;
        if (start == 1'h1) begin
          M_state_d = TESTING_state;
        end
      end
      TESTING_state: begin
        
        case (M_register_q)
          4'h0: begin
            M_adder_a = 16'h0000;
            M_adder_b = 16'h0000;
            M_adder_alufn0 = 1'h0;
            if (M_adder_out != 16'h0000) begin
              M_state_d = FAIL_state;
            end
          end
          4'h1: begin
            M_adder_a = 16'h8001;
            M_adder_b = 16'h8000;
            M_adder_alufn0 = 1'h0;
            if (M_adder_out != 16'h0001) begin
              M_state_d = FAIL_state;
            end
          end
          4'h2: begin
            M_adder_a = 16'h0001;
            M_adder_b = 16'h0001;
            M_adder_alufn0 = 1'h0;
            if (M_adder_out != 16'h0002) begin
              M_state_d = FAIL_state;
            end
          end
          4'h3: begin
            M_adder_a = 16'h0004;
            M_adder_b = 16'hffff;
            M_adder_alufn0 = 1'h0;
            if (M_adder_out != 16'h0003) begin
              M_state_d = FAIL_state;
            end
          end
          4'h4: begin
            M_adder_a = 16'h0001;
            M_adder_b = 16'hf000;
            M_adder_alufn0 = 1'h0;
            if (M_adder_out != 16'hf001) begin
              M_state_d = FAIL_state;
            end
          end
          4'h5: begin
            M_adder_a = 16'h0000;
            M_adder_b = 16'h0000;
            M_adder_alufn0 = 1'h1;
            if (M_adder_out != 16'h0000) begin
              M_state_d = FAIL_state;
            end
          end
          4'h6: begin
            M_adder_a = 16'h0002;
            M_adder_b = 16'h0001;
            M_adder_alufn0 = 1'h1;
            if (M_adder_out != 16'h0001) begin
              M_state_d = FAIL_state;
            end
          end
          4'h7: begin
            M_adder_a = 16'h7fff;
            M_adder_b = 16'h8001;
            M_adder_alufn0 = 1'h1;
            if (M_adder_out != 16'hfffe) begin
              M_state_d = FAIL_state;
            end
          end
          4'h8: begin
            M_adder_a = 16'h0001;
            M_adder_b = 16'hffff;
            M_adder_alufn0 = 1'h1;
            if (M_adder_out != 16'h0002) begin
              M_state_d = FAIL_state;
            end
          end
          4'h9: begin
            M_adder_a = 16'h8000;
            M_adder_b = 16'h0001;
            M_adder_alufn0 = 1'h1;
            if (M_adder_out != 16'h7fff) begin
              M_state_d = FAIL_state;
            end
          end
          4'ha: begin
            M_adder_a = 16'hffff;
            M_adder_b = 16'h0001;
            M_adder_alufn0 = 1'h1;
            if (M_adder_out != 16'hfffe) begin
              M_state_d = FAIL_state;
            end
          end
          4'hb: begin
            M_adder_a = 16'hffff;
            M_adder_b = 16'hffff;
            M_adder_alufn0 = 1'h1;
            if (M_adder_out != 16'h0000) begin
              M_state_d = FAIL_state;
            end
          end
          4'hc: begin
            M_state_d = PASS_state;
          end
        endcase
      end
      PASS_state: begin
        status = 1'h1;
      end
      FAIL_state: begin
        status = 2'h2;
      end
    endcase
    M_register_d = M_enum_sel;
    out = M_adder_out;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_register_q <= 1'h0;
    end else begin
      M_register_q <= M_register_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
