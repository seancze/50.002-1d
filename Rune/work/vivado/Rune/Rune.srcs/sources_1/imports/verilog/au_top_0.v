/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_cpu_timer;
  wire [16-1:0] M_cpu_score;
  wire [160-1:0] M_cpu_out;
  reg [1-1:0] M_cpu_reset_button;
  reg [1-1:0] M_cpu_start_button;
  reg [1-1:0] M_cpu_left;
  reg [1-1:0] M_cpu_right;
  reg [1-1:0] M_cpu_up;
  reg [1-1:0] M_cpu_down;
  full_circuit_1 cpu (
    .clk(clk),
    .rst(rst),
    .reset_button(M_cpu_reset_button),
    .start_button(M_cpu_start_button),
    .left(M_cpu_left),
    .right(M_cpu_right),
    .up(M_cpu_up),
    .down(M_cpu_down),
    .timer(M_cpu_timer),
    .score(M_cpu_score),
    .out(M_cpu_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [(3'h5+0)-1:0] M_buttoncond_out;
  reg [(3'h5+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<3'h5;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_3 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h5+0)-1:0] M_buttondetector_out;
  reg [(3'h5+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<3'h5;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_4 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_buttoncond_in = io_button;
    M_buttondetector_in = M_buttoncond_out;
    M_cpu_up = M_buttondetector_out[0+0-:1];
    M_cpu_down = M_buttondetector_out[2+0-:1];
    M_cpu_left = M_buttondetector_out[3+0-:1];
    M_cpu_right = M_buttondetector_out[4+0-:1];
    M_cpu_start_button = M_buttondetector_out[1+0-:1];
    M_cpu_reset_button = io_dip[0+0+0-:1];
    M_seg_values = {M_cpu_out[16+0+3-:4], M_cpu_out[32+0+3-:4], M_cpu_out[48+0+3-:4], M_cpu_timer[0+3-:4]};
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    io_led[0+15-:16] = M_cpu_score;
  end
endmodule
