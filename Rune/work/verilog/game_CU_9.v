/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_CU_9 (
    input clk,
    input rst,
    input [15:0] rb_data,
    input st,
    input vi,
    input vi_ur,
    input reset_button,
    input start_button,
    input left_arrow,
    input right_arrow,
    input up_arrow,
    input down_arrow,
    output reg we,
    output reg [3:0] ra,
    output reg [3:0] rb,
    output reg [3:0] rc,
    output reg asel,
    output reg [2:0] bsel,
    output reg [1:0] wdsel,
    output reg wasel,
    output reg ra2sel,
    output reg [5:0] alufn
  );
  
  
  
  localparam START_game_fsm = 7'd0;
  localparam GAME_OVER_game_fsm = 7'd1;
  localparam INCREMENT_LEVEL_game_fsm = 7'd2;
  localparam CHECK_LEVEL_LTE9_game_fsm = 7'd3;
  localparam BRANCH_CHECK_LEVEL_LTE9_game_fsm = 7'd4;
  localparam INCREMENT_RANDOMIZER_1_game_fsm = 7'd5;
  localparam CHECK_RANDOMIZER_1_LTE4_game_fsm = 7'd6;
  localparam BRANCH_CHECK_RANDOMIZER_1_LTE4_game_fsm = 7'd7;
  localparam MAKE_RANDOMIZER_1_1_game_fsm = 7'd8;
  localparam SET_CURRENT_ARROW_TO_1_RESET_game_fsm = 7'd9;
  localparam SET_CURRENT_ARROW_TO_1_RSA_1_game_fsm = 7'd10;
  localparam SET_CURRENT_ARROW_TO_1_RSA_2_game_fsm = 7'd11;
  localparam SET_CURRENT_ARROW_TO_1_IDLE_game_fsm = 7'd12;
  localparam SETUP_NTH_EQ_RANDOMIZER_game_fsm = 7'd13;
  localparam INCREMENT_CURRENT_ARROW_GREEN_game_fsm = 7'd14;
  localparam INCREMENT_CURRENT_ARROW_RESET_game_fsm = 7'd15;
  localparam INCREMENT_CURRENT_ARROW_RSA_1_game_fsm = 7'd16;
  localparam INCREMENT_CURRENT_ARROW_RSA_2_game_fsm = 7'd17;
  localparam IDLE_game_fsm = 7'd18;
  localparam IDLE1_game_fsm = 7'd19;
  localparam INCREMENT_RANDOMIZER_RSA_1_game_fsm = 7'd20;
  localparam CHECK_RANDOMIZER_RSA_1_LTE4_game_fsm = 7'd21;
  localparam BRANCH_CHECK_RANDOMIZER_RSA_1_LTE4_game_fsm = 7'd22;
  localparam MAKE_RANDOMIZER_RSA_1_1_game_fsm = 7'd23;
  localparam IDLE2_game_fsm = 7'd24;
  localparam INCREMENT_RANDOMIZER_RSA_2_game_fsm = 7'd25;
  localparam CHECK_RANDOMIZER_RSA_2_LTE4_game_fsm = 7'd26;
  localparam BRANCH_CHECK_RANDOMIZER_RSA_2_LTE4_game_fsm = 7'd27;
  localparam MAKE_RANDOMIZER_RSA_2_1_game_fsm = 7'd28;
  localparam IDLE3_game_fsm = 7'd29;
  localparam INCREMENT_RANDOMIZER_RSA_3_game_fsm = 7'd30;
  localparam CHECK_RANDOMIZER_RSA_3_LTE4_game_fsm = 7'd31;
  localparam BRANCH_CHECK_RANDOMIZER_RSA_3_LTE4_game_fsm = 7'd32;
  localparam MAKE_RANDOMIZER_RSA_3_1_game_fsm = 7'd33;
  localparam CHECK_CURRENT_ARROW_LTE_LEVEL_game_fsm = 7'd34;
  localparam BRANCH_CHECK_CURRENT_ARROW_LTE_LEVEL_game_fsm = 7'd35;
  localparam RESET_TIMER_EQ4_game_fsm = 7'd36;
  localparam LOAD_CURRENT_ARROW_DATA_TO_TEMP_LEFT_game_fsm = 7'd37;
  localparam LOAD_CURRENT_ARROW_DATA_TO_TEMP_RIGHT_game_fsm = 7'd38;
  localparam LOAD_CURRENT_ARROW_DATA_TO_TEMP_UP_game_fsm = 7'd39;
  localparam LOAD_CURRENT_ARROW_DATA_TO_TEMP_DOWN_game_fsm = 7'd40;
  localparam CHECK_CORRECT_INPUT_LEFT_game_fsm = 7'd41;
  localparam CHECK_CORRECT_INPUT_RIGHT_game_fsm = 7'd42;
  localparam CHECK_CORRECT_INPUT_UP_game_fsm = 7'd43;
  localparam CHECK_CORRECT_INPUT_DOWN_game_fsm = 7'd44;
  localparam BRANCH_CHECK_CORRECT_INPUT_game_fsm = 7'd45;
  localparam MAKE_NTH_ARROW_GREEN_game_fsm = 7'd46;
  localparam CHECK_GAME_TIMER_MT_0_game_fsm = 7'd47;
  localparam BRANCH_GAME_TIMER_game_fsm = 7'd48;
  localparam CHECK_NUMBER_OF_CORRECT_INPUT_EQ_LEVEL_game_fsm = 7'd49;
  localparam DECREASE_GAME_TIMER_game_fsm = 7'd50;
  localparam BRANCH_CHECK_NUMBER_OF_CORRECT_INPUT_EQ_LEVEL_game_fsm = 7'd51;
  localparam INCREMENT_SCORE_game_fsm = 7'd52;
  localparam SET_NUMBER_OF_CORRECT_INPUT_EQ_0_game_fsm = 7'd53;
  localparam SET_R0_0_game_fsm = 7'd54;
  localparam SET_R1_0_game_fsm = 7'd55;
  localparam SET_R2_0_game_fsm = 7'd56;
  localparam SET_R3_0_game_fsm = 7'd57;
  localparam SET_R4_0_game_fsm = 7'd58;
  localparam SET_R5_0_game_fsm = 7'd59;
  localparam SET_R6_0_game_fsm = 7'd60;
  localparam SET_R7_0_game_fsm = 7'd61;
  localparam SET_R8_0_game_fsm = 7'd62;
  localparam SET_R9_0_game_fsm = 7'd63;
  localparam SET_R10_0_game_fsm = 7'd64;
  localparam SET_R11_0_game_fsm = 7'd65;
  localparam SET_R12_0_game_fsm = 7'd66;
  localparam SET_R13_0_game_fsm = 7'd67;
  localparam SET_R14_0_game_fsm = 7'd68;
  localparam SET_R15_0_game_fsm = 7'd69;
  localparam INCREMENT_NUMBER_OF_CORRECT_INPUT_game_fsm = 7'd70;
  localparam CHECK_NUMBER_OF_CORRECT_INPUT_game_fsm = 7'd71;
  localparam CHECK_NUMBER_OF_CORRECT_INPUT_LT_LEVEL_game_fsm = 7'd72;
  localparam BRANCH_CHECK_LT_LEVEL_game_fsm = 7'd73;
  localparam BRANCH_CHECK_NTH_ARROW_EMPTY_game_fsm = 7'd74;
  localparam CHECK_NTH_ARROW_EMPTY_game_fsm = 7'd75;
  localparam CHECK_CURRENT_ARROW_LTE_NUMBER_OF_CORRECT_INPUT_game_fsm = 7'd76;
  localparam BRANCH_CHECK_CURRENT_ARROW_LTE_NUMBER_OF_CORRECT_INPUT_game_fsm = 7'd77;
  localparam MAKE_NTH_ARROW_WHITE_game_fsm = 7'd78;
  localparam INCREMENT_RANDOMIZER_IDLE_game_fsm = 7'd79;
  localparam CHECK_RANDOMIZER_IDLE_LTE4_game_fsm = 7'd80;
  localparam BRANCH_CHECK_RANDOMIZER_IDLE_LTE4_game_fsm = 7'd81;
  localparam MAKE_RANDOMIZER_IDLE_1_game_fsm = 7'd82;
  
  reg [6:0] M_game_fsm_d, M_game_fsm_q = START_game_fsm;
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    alufn = 6'h00;
    asel = 1'h0;
    bsel = 1'h0;
    we = 1'h0;
    ra = 4'hf;
    rb = 4'hf;
    rc = 4'hf;
    ra2sel = 1'h0;
    wdsel = 2'h0;
    wasel = 1'h0;
    if (rst) begin
      M_game_fsm_d = START_game_fsm;
    end else begin
      if (reset_button) begin
        M_game_fsm_d = SET_R0_0_game_fsm;
      end else begin
        
        case (M_game_fsm_q)
          START_game_fsm: begin
            we = 1'h0;
            if (start_button) begin
              M_game_fsm_d = INCREMENT_LEVEL_game_fsm;
            end else begin
              M_game_fsm_d = START_game_fsm;
            end
          end
          SET_R0_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h0;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R1_0_game_fsm;
          end
          SET_R1_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h1;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R2_0_game_fsm;
          end
          SET_R2_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h2;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R3_0_game_fsm;
          end
          SET_R3_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h3;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R4_0_game_fsm;
          end
          SET_R4_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h4;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R5_0_game_fsm;
          end
          SET_R5_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h5;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R6_0_game_fsm;
          end
          SET_R6_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h6;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R7_0_game_fsm;
          end
          SET_R7_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h7;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R8_0_game_fsm;
          end
          SET_R8_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h8;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R9_0_game_fsm;
          end
          SET_R9_0_game_fsm: begin
            we = 1'h1;
            rc = 4'h9;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R10_0_game_fsm;
          end
          SET_R10_0_game_fsm: begin
            we = 1'h1;
            rc = 4'ha;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R11_0_game_fsm;
          end
          SET_R11_0_game_fsm: begin
            we = 1'h1;
            rc = 4'hb;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R12_0_game_fsm;
          end
          SET_R12_0_game_fsm: begin
            we = 1'h1;
            rc = 4'hc;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R13_0_game_fsm;
          end
          SET_R13_0_game_fsm: begin
            we = 1'h1;
            rc = 4'hd;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R14_0_game_fsm;
          end
          SET_R14_0_game_fsm: begin
            we = 1'h1;
            rc = 4'he;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = SET_R15_0_game_fsm;
          end
          SET_R15_0_game_fsm: begin
            we = 1'h1;
            rc = 4'hf;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = START_game_fsm;
          end
          INCREMENT_LEVEL_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'hb;
            rc = 4'hb;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = CHECK_LEVEL_LTE9_game_fsm;
          end
          CHECK_LEVEL_LTE9_game_fsm: begin
            alufn = 6'h37;
            asel = 1'h0;
            bsel = 3'h5;
            we = 1'h1;
            ra = 4'hb;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_LEVEL_LTE9_game_fsm;
          end
          BRANCH_CHECK_LEVEL_LTE9_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = INCREMENT_RANDOMIZER_1_game_fsm;
            end else begin
              M_game_fsm_d = GAME_OVER_game_fsm;
            end
          end
          GAME_OVER_game_fsm: begin
            we = 1'h0;
            if (reset_button) begin
              M_game_fsm_d = SET_R0_0_game_fsm;
            end else begin
              M_game_fsm_d = GAME_OVER_game_fsm;
            end
          end
          INCREMENT_RANDOMIZER_1_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hc;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = CHECK_RANDOMIZER_1_LTE4_game_fsm;
          end
          CHECK_RANDOMIZER_1_LTE4_game_fsm: begin
            alufn = 6'h37;
            asel = 1'h0;
            bsel = 3'h4;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_RANDOMIZER_1_LTE4_game_fsm;
          end
          BRANCH_CHECK_RANDOMIZER_1_LTE4_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = INCREMENT_CURRENT_ARROW_RSA_1_game_fsm;
            end else begin
              M_game_fsm_d = MAKE_RANDOMIZER_1_1_game_fsm;
            end
          end
          MAKE_RANDOMIZER_1_1_game_fsm: begin
            we = 1'h1;
            rc = 4'hc;
            wdsel = 2'h2;
            wasel = 2'h0;
            M_game_fsm_d = INCREMENT_CURRENT_ARROW_RSA_1_game_fsm;
          end
          INCREMENT_CURRENT_ARROW_RSA_1_game_fsm: begin
            we = 1'h1;
            rc = 4'he;
            wdsel = 2'h2;
            wasel = 2'h0;
            M_game_fsm_d = SETUP_NTH_EQ_RANDOMIZER_game_fsm;
          end
          SETUP_NTH_EQ_RANDOMIZER_game_fsm: begin
            alufn = 6'h1a;
            asel = 1'h0;
            we = 1'h1;
            ra = 4'hc;
            rb = 4'he;
            wdsel = 2'h0;
            wasel = 1'h1;
            ra2sel = 1'h0;
            M_game_fsm_d = INCREMENT_CURRENT_ARROW_RSA_2_game_fsm;
          end
          INCREMENT_CURRENT_ARROW_RSA_2_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'he;
            rc = 4'he;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = IDLE1_game_fsm;
          end
          IDLE1_game_fsm: begin
            we = 1'h0;
            if (vi_ur) begin
              M_game_fsm_d = INCREMENT_RANDOMIZER_RSA_1_game_fsm;
            end else begin
              M_game_fsm_d = IDLE2_game_fsm;
            end
          end
          INCREMENT_RANDOMIZER_RSA_1_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hc;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = CHECK_RANDOMIZER_RSA_1_LTE4_game_fsm;
          end
          CHECK_RANDOMIZER_RSA_1_LTE4_game_fsm: begin
            alufn = 6'h37;
            asel = 1'h0;
            bsel = 3'h4;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_RANDOMIZER_RSA_1_LTE4_game_fsm;
          end
          BRANCH_CHECK_RANDOMIZER_RSA_1_LTE4_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = IDLE2_game_fsm;
            end else begin
              M_game_fsm_d = MAKE_RANDOMIZER_RSA_1_1_game_fsm;
            end
          end
          MAKE_RANDOMIZER_RSA_1_1_game_fsm: begin
            we = 1'h1;
            rc = 4'hc;
            wdsel = 2'h2;
            wasel = 1'h0;
            M_game_fsm_d = IDLE2_game_fsm;
          end
          IDLE2_game_fsm: begin
            if (vi_ur) begin
              M_game_fsm_d = INCREMENT_RANDOMIZER_RSA_2_game_fsm;
            end else begin
              M_game_fsm_d = IDLE3_game_fsm;
            end
          end
          INCREMENT_RANDOMIZER_RSA_2_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hc;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = CHECK_RANDOMIZER_RSA_2_LTE4_game_fsm;
          end
          CHECK_RANDOMIZER_RSA_2_LTE4_game_fsm: begin
            alufn = 6'h37;
            asel = 1'h0;
            bsel = 3'h4;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_RANDOMIZER_RSA_2_LTE4_game_fsm;
          end
          BRANCH_CHECK_RANDOMIZER_RSA_2_LTE4_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = IDLE3_game_fsm;
            end else begin
              M_game_fsm_d = MAKE_RANDOMIZER_RSA_2_1_game_fsm;
            end
          end
          MAKE_RANDOMIZER_RSA_2_1_game_fsm: begin
            we = 1'h1;
            rc = 4'hc;
            wdsel = 2'h2;
            wasel = 1'h0;
            M_game_fsm_d = IDLE3_game_fsm;
          end
          IDLE3_game_fsm: begin
            if (vi_ur) begin
              M_game_fsm_d = INCREMENT_RANDOMIZER_RSA_3_game_fsm;
            end else begin
              M_game_fsm_d = CHECK_CURRENT_ARROW_LTE_LEVEL_game_fsm;
            end
          end
          INCREMENT_RANDOMIZER_RSA_3_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hc;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = CHECK_RANDOMIZER_RSA_3_LTE4_game_fsm;
          end
          CHECK_RANDOMIZER_RSA_3_LTE4_game_fsm: begin
            alufn = 6'h37;
            asel = 1'h0;
            bsel = 3'h4;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_RANDOMIZER_RSA_3_LTE4_game_fsm;
          end
          BRANCH_CHECK_RANDOMIZER_RSA_3_LTE4_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = CHECK_CURRENT_ARROW_LTE_LEVEL_game_fsm;
            end else begin
              M_game_fsm_d = MAKE_RANDOMIZER_RSA_3_1_game_fsm;
            end
          end
          MAKE_RANDOMIZER_RSA_3_1_game_fsm: begin
            we = 1'h1;
            rc = 4'hc;
            wdsel = 2'h2;
            wasel = 1'h0;
            M_game_fsm_d = CHECK_CURRENT_ARROW_LTE_LEVEL_game_fsm;
          end
          CHECK_CURRENT_ARROW_LTE_LEVEL_game_fsm: begin
            alufn = 6'h37;
            asel = 1'h0;
            bsel = 3'h0;
            we = 1'h1;
            ra = 4'he;
            rb = 4'hb;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_CURRENT_ARROW_LTE_LEVEL_game_fsm;
          end
          BRANCH_CHECK_CURRENT_ARROW_LTE_LEVEL_game_fsm: begin
            we = 1'h0;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = SETUP_NTH_EQ_RANDOMIZER_game_fsm;
            end else begin
              M_game_fsm_d = RESET_TIMER_EQ4_game_fsm;
            end
          end
          RESET_TIMER_EQ4_game_fsm: begin
            we = 1'h1;
            rc = 4'h0;
            wdsel = 2'h3;
            wasel = 1'h0;
            M_game_fsm_d = SET_CURRENT_ARROW_TO_1_IDLE_game_fsm;
          end
          SET_CURRENT_ARROW_TO_1_IDLE_game_fsm: begin
            we = 1'h1;
            rc = 4'he;
            wdsel = 2'h2;
            wasel = 1'h0;
            M_game_fsm_d = IDLE_game_fsm;
          end
          IDLE_game_fsm: begin
            we = 1'h0;
            if (st) begin
              M_game_fsm_d = CHECK_GAME_TIMER_MT_0_game_fsm;
            end else begin
              if (vi && ~up_arrow && ~down_arrow && ~left_arrow && ~right_arrow) begin
                M_game_fsm_d = INCREMENT_RANDOMIZER_IDLE_game_fsm;
              end else begin
                if (up_arrow && ~down_arrow && ~left_arrow && ~right_arrow) begin
                  M_game_fsm_d = LOAD_CURRENT_ARROW_DATA_TO_TEMP_UP_game_fsm;
                end else begin
                  if (down_arrow && ~up_arrow && ~left_arrow && ~right_arrow) begin
                    M_game_fsm_d = LOAD_CURRENT_ARROW_DATA_TO_TEMP_DOWN_game_fsm;
                  end else begin
                    if (left_arrow && ~up_arrow && ~down_arrow && ~right_arrow) begin
                      M_game_fsm_d = LOAD_CURRENT_ARROW_DATA_TO_TEMP_LEFT_game_fsm;
                    end else begin
                      if (right_arrow && ~up_arrow && ~down_arrow && ~left_arrow) begin
                        M_game_fsm_d = LOAD_CURRENT_ARROW_DATA_TO_TEMP_RIGHT_game_fsm;
                      end else begin
                        M_game_fsm_d = IDLE_game_fsm;
                      end
                    end
                  end
                end
              end
            end
          end
          LOAD_CURRENT_ARROW_DATA_TO_TEMP_UP_game_fsm: begin
            alufn = 6'h1a;
            asel = 1'h0;
            we = 1'h1;
            rb = 4'he;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h1;
            M_game_fsm_d = CHECK_CORRECT_INPUT_UP_game_fsm;
          end
          LOAD_CURRENT_ARROW_DATA_TO_TEMP_DOWN_game_fsm: begin
            alufn = 6'h1a;
            asel = 1'h0;
            we = 1'h1;
            rb = 4'he;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h1;
            M_game_fsm_d = CHECK_CORRECT_INPUT_DOWN_game_fsm;
          end
          LOAD_CURRENT_ARROW_DATA_TO_TEMP_LEFT_game_fsm: begin
            alufn = 6'h1a;
            asel = 1'h0;
            we = 1'h1;
            rb = 4'he;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h1;
            M_game_fsm_d = CHECK_CORRECT_INPUT_LEFT_game_fsm;
          end
          LOAD_CURRENT_ARROW_DATA_TO_TEMP_RIGHT_game_fsm: begin
            alufn = 6'h1a;
            asel = 1'h0;
            we = 1'h1;
            rb = 4'he;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h1;
            M_game_fsm_d = CHECK_CORRECT_INPUT_RIGHT_game_fsm;
          end
          CHECK_CORRECT_INPUT_LEFT_game_fsm: begin
            alufn = 6'h33;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'hf;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_CORRECT_INPUT_game_fsm;
          end
          CHECK_CORRECT_INPUT_RIGHT_game_fsm: begin
            alufn = 6'h33;
            asel = 1'h0;
            bsel = 3'h2;
            we = 1'h1;
            ra = 4'hf;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_CORRECT_INPUT_game_fsm;
          end
          CHECK_CORRECT_INPUT_UP_game_fsm: begin
            alufn = 6'h33;
            asel = 1'h0;
            bsel = 3'h3;
            we = 1'h1;
            ra = 4'hf;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_CORRECT_INPUT_game_fsm;
          end
          CHECK_CORRECT_INPUT_DOWN_game_fsm: begin
            alufn = 6'h33;
            asel = 1'h0;
            bsel = 3'h4;
            we = 1'h1;
            ra = 4'hf;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_CORRECT_INPUT_game_fsm;
          end
          BRANCH_CHECK_CORRECT_INPUT_game_fsm: begin
            we = 1'h0;
            rc = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = MAKE_NTH_ARROW_GREEN_game_fsm;
            end else begin
              M_game_fsm_d = SET_CURRENT_ARROW_TO_1_RESET_game_fsm;
            end
          end
          MAKE_NTH_ARROW_GREEN_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h4;
            we = 1'h1;
            rb = 4'he;
            wdsel = 2'h0;
            wasel = 1'h1;
            ra2sel = 1'h1;
            M_game_fsm_d = INCREMENT_NUMBER_OF_CORRECT_INPUT_game_fsm;
          end
          INCREMENT_NUMBER_OF_CORRECT_INPUT_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'hd;
            rc = 4'hd;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = CHECK_NUMBER_OF_CORRECT_INPUT_LT_LEVEL_game_fsm;
          end
          CHECK_NUMBER_OF_CORRECT_INPUT_LT_LEVEL_game_fsm: begin
            alufn = 6'h35;
            asel = 1'h0;
            bsel = 3'h0;
            we = 1'h1;
            ra = 4'hd;
            rb = 4'hb;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_LT_LEVEL_game_fsm;
          end
          BRANCH_CHECK_LT_LEVEL_game_fsm: begin
            we = 1'h0;
            rc = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = INCREMENT_CURRENT_ARROW_GREEN_game_fsm;
            end else begin
              M_game_fsm_d = IDLE_game_fsm;
            end
          end
          INCREMENT_CURRENT_ARROW_GREEN_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'he;
            rc = 4'he;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = IDLE_game_fsm;
          end
          SET_CURRENT_ARROW_TO_1_RESET_game_fsm: begin
            we = 1'h1;
            rc = 4'he;
            wdsel = 2'h2;
            wasel = 1'h0;
            M_game_fsm_d = CHECK_NTH_ARROW_EMPTY_game_fsm;
          end
          CHECK_NTH_ARROW_EMPTY_game_fsm: begin
            alufn = 6'h33;
            asel = 1'h0;
            bsel = 3'h6;
            we = 1'h1;
            rb = 4'he;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h1;
            M_game_fsm_d = BRANCH_CHECK_NTH_ARROW_EMPTY_game_fsm;
          end
          BRANCH_CHECK_NTH_ARROW_EMPTY_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = SET_CURRENT_ARROW_TO_1_IDLE_game_fsm;
            end else begin
              M_game_fsm_d = CHECK_CURRENT_ARROW_LTE_NUMBER_OF_CORRECT_INPUT_game_fsm;
            end
          end
          CHECK_CURRENT_ARROW_LTE_NUMBER_OF_CORRECT_INPUT_game_fsm: begin
            alufn = 6'h37;
            asel = 1'h0;
            bsel = 3'h0;
            we = 1'h1;
            ra = 4'he;
            rb = 4'hd;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_CURRENT_ARROW_LTE_NUMBER_OF_CORRECT_INPUT_game_fsm;
          end
          BRANCH_CHECK_CURRENT_ARROW_LTE_NUMBER_OF_CORRECT_INPUT_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = MAKE_NTH_ARROW_WHITE_game_fsm;
            end else begin
              M_game_fsm_d = INCREMENT_CURRENT_ARROW_RESET_game_fsm;
            end
          end
          MAKE_NTH_ARROW_WHITE_game_fsm: begin
            alufn = 6'h01;
            asel = 1'h0;
            bsel = 3'h4;
            we = 1'h1;
            rb = 4'he;
            wdsel = 2'h0;
            wasel = 1'h1;
            ra2sel = 1'h1;
            M_game_fsm_d = INCREMENT_CURRENT_ARROW_RESET_game_fsm;
          end
          INCREMENT_CURRENT_ARROW_RESET_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'he;
            rc = 4'he;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = CHECK_NTH_ARROW_EMPTY_game_fsm;
          end
          INCREMENT_RANDOMIZER_IDLE_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hc;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = CHECK_RANDOMIZER_IDLE_LTE4_game_fsm;
          end
          CHECK_RANDOMIZER_IDLE_LTE4_game_fsm: begin
            alufn = 6'h37;
            asel = 1'h0;
            bsel = 3'h4;
            we = 1'h1;
            ra = 4'hc;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_RANDOMIZER_IDLE_LTE4_game_fsm;
          end
          BRANCH_CHECK_RANDOMIZER_IDLE_LTE4_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = IDLE_game_fsm;
            end else begin
              M_game_fsm_d = MAKE_RANDOMIZER_IDLE_1_game_fsm;
            end
          end
          MAKE_RANDOMIZER_IDLE_1_game_fsm: begin
            we = 1'h1;
            rc = 4'hc;
            wdsel = 2'h2;
            wasel = 2'h0;
            M_game_fsm_d = IDLE_game_fsm;
          end
          CHECK_GAME_TIMER_MT_0_game_fsm: begin
            alufn = 6'h33;
            asel = 1'h0;
            bsel = 3'h6;
            we = 1'h1;
            ra = 4'h0;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_GAME_TIMER_game_fsm;
          end
          BRANCH_GAME_TIMER_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = CHECK_NUMBER_OF_CORRECT_INPUT_EQ_LEVEL_game_fsm;
            end else begin
              M_game_fsm_d = DECREASE_GAME_TIMER_game_fsm;
            end
          end
          DECREASE_GAME_TIMER_game_fsm: begin
            alufn = 6'h01;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'h0;
            rc = 4'h0;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = IDLE_game_fsm;
          end
          CHECK_NUMBER_OF_CORRECT_INPUT_EQ_LEVEL_game_fsm: begin
            alufn = 6'h33;
            asel = 1'h0;
            bsel = 3'h0;
            we = 1'h1;
            ra = 4'hd;
            rb = 4'hb;
            rc = 4'hf;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = BRANCH_CHECK_NUMBER_OF_CORRECT_INPUT_EQ_LEVEL_game_fsm;
          end
          BRANCH_CHECK_NUMBER_OF_CORRECT_INPUT_EQ_LEVEL_game_fsm: begin
            we = 1'h0;
            rb = 4'hf;
            if (rb_data[0+0-:1]) begin
              M_game_fsm_d = INCREMENT_SCORE_game_fsm;
            end else begin
              M_game_fsm_d = SET_NUMBER_OF_CORRECT_INPUT_EQ_0_game_fsm;
            end
          end
          SET_NUMBER_OF_CORRECT_INPUT_EQ_0_game_fsm: begin
            we = 1'h1;
            rc = 4'hd;
            wdsel = 2'h1;
            wasel = 1'h0;
            M_game_fsm_d = INCREMENT_LEVEL_game_fsm;
          end
          INCREMENT_SCORE_game_fsm: begin
            alufn = 6'h00;
            asel = 1'h0;
            bsel = 3'h1;
            we = 1'h1;
            ra = 4'ha;
            rc = 4'ha;
            wdsel = 2'h0;
            wasel = 1'h0;
            ra2sel = 1'h0;
            M_game_fsm_d = SET_NUMBER_OF_CORRECT_INPUT_EQ_0_game_fsm;
          end
        endcase
      end
    end
  end
  
  always @(posedge clk) begin
    M_game_fsm_q <= M_game_fsm_d;
  end
  
endmodule
