module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    // to matrix. See custom.acf for pins
    output red0,
    output green0, 
    output blue0,
    output red1,
    output green1,
    output blue1,
    output latch, 
    output blank, // also known as oe
    output sclk_out,
    output address[4] // row address current write to LED matrix
  ) {
  
  sig rst;                  // reset signal
  
  matrix_writer matrixwriter(.clk(clk), .rst(rst));
  matrix_ram_writer ramwriter(#DATA_WIDTH(16), .clk(clk), .rst(rst));
  matrix_ram matrixram(.clk(clk), .rst(rst));
  
  dff row_index[8](.clk(clk));
  dff col_index[8](.clk(clk));


  full_circuit cpu(.clk(clk), .rst(rst));

  multi_seven_seg seg(.clk(clk),.rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond[5];
    edge_detector buttondetector[5](#RISE(1), #FALL(0));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    //start here
    // 0: UP 1: MIDDLE 2: DOWN 3: LEFT 4: RIGHT
    buttoncond.in = io_button[4:0];
    buttondetector.in = buttoncond.out;
    
    cpu.up = buttondetector.out[0];
    cpu.down = buttondetector.out[2];
    cpu.left = buttondetector.out[3];
    cpu.right = buttondetector.out[4];
    cpu.start_button = buttondetector.out[1];
    cpu.reset_button = io_dip[0][0];
    
    //io_led[1:0] = $build(cpu.timer,2);
    
    seg.values = {cpu.out[1][3:0], cpu.out[2][3:0], cpu.out[3][3:0], cpu.timer[3:0]};
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    
    io_led[1:0] = $build(cpu.score,2);

    // // For debugging purposes; overwrite arrow colour
    // ramwriter.reload = buttondetector.out[1]; // replace this from reload signal from CPU 
    // // For debugging purposes; assign new arrow type
    // ramwriter.next_arrow = buttondetector.out[4];

    ramwriter.level_input = cpu.out[0][3:0];
    ramwriter.arrow_type_input = cpu.out[9:1];
    ramwriter.timer_input = cpu.timer[3:0];
    ramwriter.score_input = cpu.score[3:0];
    ramwriter.button_clicked = buttondetector.out;
    ramwriter.new_data = {c{io_dip[2], io_dip[2]}, c{io_dip[1], io_dip[1]}, c{io_dip[0], io_dip[0]}}; // replace this from reg content from CPU
    
    matrixram.row_address_top = ramwriter.row_address_top;
    matrixram.col_address_top = ramwriter.col_address_top;
    matrixram.we_top = ramwriter.we_top;
    matrixram.wd_top = ramwriter.wd_top;
    
    matrixram.row_address_btm = ramwriter.row_address_btm;
    matrixram.col_address_btm = ramwriter.col_address_btm;
    matrixram.we_btm = ramwriter.we_btm;
    matrixram.wd_btm = ramwriter.wd_btm;
    
    matrixram.ready = ramwriter.ready;
    
    // these indexes are offset by 2 for unknown reasons
    // to debug with more data in the matrix_ram so that we know if we don't offset the rows too 
    // right now it is handled inside matrix_ram by reducing by 2 before feeding it to the ram
    matrixram.row_address = matrixwriter.row_index;
    matrixram.col_address = matrixwriter.col_index;
    
    // matrixram.row_address = matrixwriter.address;
    // matrixram.col_address = matrixwriter.debug;
   
    
   // matrixwriter.data = 6b100100; // BLUE sample. change to the output of some RAM unit 
    matrixwriter.data = c{matrixram.bottom_out, matrixram.top_out};
  
    red0 = matrixwriter.red0;
    red1 = matrixwriter.red1;
    green0 = matrixwriter.green0;
    green1 = matrixwriter.green1;
    blue0 = matrixwriter.blue0;
    blue1 = matrixwriter.blue1;
    latch = matrixwriter.latch;
    sclk_out = matrixwriter.sclk_out;
    blank = matrixwriter.blank;
    address = matrixwriter.address;
    
    if (matrixwriter.row_index != 0){
      row_index.d = matrixwriter.row_index;
    }
    
    if (matrixwriter.col_index != 0){
      col_index.d = matrixwriter.col_index;
    }
    
    
    
    
  }
}